What is Git?
Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.
It is used for:
•	Tracking code changes
•	Tracking who made changes
•	Coding collaboration
What does Git do?
•	Manage projects with Repositories
•	Clone a project to work on a local copy
•	Control and track changes with Staging and Committing
•	Branch and Merge to allow for work on different parts and versions of a project
•	Pull the latest version of the project to a local copy
•	Push local updates to the main project
Working with Git
•	Initialize Git on a folder, making it a Repository
•	Git now creates a hidden folder to keep track of changes in that folder
•	When a file is changed, added or deleted, it is considered modified
•	You select the modified files you want to Stage
•	The Staged files are Committed, which prompts Git to store a permanent snapshot of the files
•	Git allows you to see the full history of every commit.
•	You can revert back to any previous commit.
•	Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!
Why Git?
•	Over 70% of developers use Git!
•	Developers can work together from anywhere in the world.
•	Developers can see the full history of the project.
•	Developers can revert to earlier versions of a project.
What is GitHub?
•	Git is not the same as GitHub.
•	GitHub makes tools that use Git.
•	GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.
•	In this tutorial, we will focus on using Git with GitHub.

Using Git with Command Line
git --version
git version 2.30.2.windows.1

Configure Git
git config --global user.name "cloudrock Academy"
git config --global user.email "cloudrockacademy@gmail.com"

Creating Git Folder
mkdir myproject
cd myproject

Initialize Git
git init 
Initialized empty Git repository in /Users/user/myproject/.git/


git status

Git Staging Environment
git add index.html
The file should be Staged. Let's check the status::

Now add all files in the current directory to the Staging Environment:
git add –all

Note: The shorthand command for git add --all is git add -A


git status


Git Commit

Since we have finished our work, we are ready move from stage to commit for our repo.

Adding commits keep track of our progress and changes as we work. Git considers each commit change point or "save point". It is a point in the project you can go back to if you find a bug, or want to make a change.

When we commit, we should always include a message.

git commit -m "First release of Hello World!"

The commit command performs a commit, and the -m "message" adds a message.
The Staging Environment has been committed to our repo, with the message:
"First release of Hello World!"
git commit -help

Git Commit Log

git log

Working with Git Branches
In Git, a branch is a new/separate version of the main repository.
Let's say you have a large project, and you need to update the design on it.
How would that work without and with Git:
Without Git:
•	Make copies of all the relevant files to avoid impacting the live version
•	Start working with the design and find that code depend on code in other files, that also need to be changed!
•	Make copies of the dependant files as well. Making sure that every file dependency references the correct file name
•	EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!
•	Save all your files, making a note of the names of the copies you were working on
•	Work on the unrelated error and update the code to fix it
•	Go back to the design, and finish the work there
•	Copy the code or rename the files, so the updated design is on the live version
•	(2 weeks later, you realize that the unrelated error was not fixed in the new design version because you copied the files before the fix)
With Git:
•	With a new branch called new-design, edit the code directly without impacting the main branch
•	EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!
•	Create a new branch from the main project called small-error-fix
•	Fix the unrelated error and merge the small-error-fix branch with the main branch
•	You go back to the new-design branch, and finish the work there
•	Merge the new-design branch with main (getting alerted to the small error fix that you were missing)
Branches allow you to work on different parts of a project without impacting the main branch.
When the work is complete, a branch can be merged with the main project.
You can even switch between branches and work on different projects without them interfering with each other.
Branching in Git is very lightweight and fast!

New Git Branch
Let add some new features to our index.html page.
We are working in our local repository, and we do not want to disturb or possibly wreck the main project.
So we create a new branch:
git branch hello-world-images
Now we created a new branch called "hello-world-images"
Let's confirm that we have created a new branch:
git branch
checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command:
git checkout hello-world-images
Now we have moved our current workspace from the master branch, to the new branch
Open your favourite editor and make some changes.
git checkout -b emergency-fix

Git Branch Merge
git checkout master
git merge emergency-fix

git branch -d emergency-fix
delete branch after merge.

Push Changes to GitHub
git push origin




Git Adding New Files
And save it to our new folder as index.html.

<!DOCTYPE html>
<html>
<head>
<title>Hello World!</title>
</head>
<body>

<h1>Hello world!</h1>
<p>This is the first file in my new Git Repo.</p>

</body>
</html>

For branch file edits.
<div><img src="img_hello_world.jpg" alt="Hello World from Space"
style="width:100%;max-width:960px"></div>


Another file
And save it to our new folder as hello-world.
# hello-world
Hello World repository for Git tutorial
This is an example repository for the Git tutoial on https://www.w3schools.com

This repository is built step by step in the tutorial.

ssh-keygen
 sudo cat ~/.ssh/id_rsa.pub

